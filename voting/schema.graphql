type Voter @entity {
    id: ID!
    gaugesCount: Int!
    gaugesAlive: Int!
    gaugesDead: Int!
}

type Token @entity {
    id: ID!
    name: String!
    symbol: String!
    decimals: Int!
    pairBase: [Pair!] @derivedFrom(field: "token0")
    pairQuote: [Pair!] @derivedFrom(field: "token1")
}

type Pair @entity {
    id: ID!
    name: String!
    symbol: String!
    token0: Token!
    token1: Token!
}

type Gauge @entity {
    id: ID!
    poolFactory: Bytes! # address
    votingRewardsFactory: Bytes! # address
    gaugeFactory: Bytes! # address
    pair: Pair!
    bribeVotingReward: Bytes! # address
    feeVotingReward: Bytes! # address
    creator: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    alive: Boolean!
    positions: [GaugePosition!] @deriveFrom(field: "gauge")
    availableRewards: BigDecimal!
    totalDeposits: BigDecimal!
}

type GaugePosition @entity {
    id: ID!
    owner: Bytes!
    gauge: Gauge!
    amount: BigDecimal!
}
