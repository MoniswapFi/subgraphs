type Voter @entity {
    id: ID!
    gaugesCount: Int!
    gaugesAlive: Int!
    gaugesDead: Int!
}

type LPToken @entity {
    id: ID!
    name: String!
    symbol: String!
    decimals: Int!
    pairBase: [LP!] @derivedFrom(field: "token0")
    pairQuote: [LP!] @derivedFrom(field: "token1")
}

type LP @entity {
    id: ID!
    name: String!
    symbol: String!
    token0: LPToken!
    token1: LPToken!
}

type Gauge @entity {
    id: ID!
    poolFactory: Bytes! # address
    votingRewardsFactory: Bytes! # address
    gaugeFactory: Bytes! # address
    pair: LP!
    bribeVotingReward: Bytes! # address
    feeVotingReward: Bytes! # address
    creator: Bytes! # address
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    alive: Boolean!
    positions: [GaugePosition!] @derivedFrom(field: "gauge")
    availableRewards: BigDecimal!
    totalDeposits: BigDecimal!
}

type GaugePosition @entity {
    id: ID!
    owner: Bytes!
    gauge: Gauge!
    amount: BigDecimal!
}

type VotePosition @entity {
    id: ID!
    lockId: BigInt
    pair: LP
    blockTimestamp: BigInt!
    account: Bytes!
}
